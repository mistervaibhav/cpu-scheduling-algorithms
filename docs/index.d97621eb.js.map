{"mappings":"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","sources":["index.js"],"sourcesContent":["let priorityPreference = 1; //priority preferences change\ndocument.getElementById(\"priority-toggle-btn\").onclick = () => {\n    let currentPriorityPreference = document.getElementById(\"priority-preference\").innerText;\n    if (currentPriorityPreference == \"high\") {\n        document.getElementById(\"priority-preference\").innerText = \"low\";\n    } else {\n        document.getElementById(\"priority-preference\").innerText = \"high\";\n    }\n    priorityPreference *= -1;\n};\n\nlet selectedAlgorithm = document.getElementById('algo');\n\nfunction checkTimeQuantumInput() {\n    let timequantum = document.querySelector(\"#time-quantum\").classList;\n    if (selectedAlgorithm.value == 'rr') {\n        timequantum.remove(\"hide\");\n    } else {\n        timequantum.add(\"hide\");\n    }\n}\n\nfunction checkPriorityCell() {\n    let prioritycell = document.querySelectorAll(\".priority\");\n    if (selectedAlgorithm.value == \"pnp\" || selectedAlgorithm.value == \"pp\") {\n        prioritycell.forEach((element) => {\n            element.classList.remove(\"hide\");\n        });\n    } else {\n        prioritycell.forEach((element) => {\n            element.classList.add(\"hide\");\n        });\n    }\n}\n\nselectedAlgorithm.onchange = () => {\n    checkTimeQuantumInput();\n    checkPriorityCell();\n};\n\nfunction inputOnChange() { //onchange EventListener for input\n    let inputs = document.querySelectorAll('input');\n    inputs.forEach((input) => {\n        if (input.type == 'number') {\n            input.onchange = () => {\n                let inputVal = Number(input.value);\n                let isInt = Number.isInteger(inputVal);\n                if (input.parentNode.classList.contains('arrival-time') || input.id == 'context-switch') //min 0 : arrival time\n                {\n                    if (!isInt || (isInt && inputVal < 0)) {\n                        input.value = 0;\n                    } else {\n                        input.value = inputVal;\n                    }\n                } else //min 1 : time quantum, priority, process time\n                {\n                    if (!isInt || (isInt && inputVal < 1)) {\n                        input.value = 1;\n                    } else {\n                        input.value = inputVal;\n                    }\n                }\n            }\n        }\n    });\n}\ninputOnChange();\nlet process = 1;\n//resize burst time rows size on +/-\n\nfunction gcd(x, y) {\n    while (y) {\n        let t = y;\n        y = x % y;\n        x = t;\n    }\n    return x;\n}\n\nfunction lcm(x, y) {\n    return (x * y) / gcd(x, y);\n}\n\nfunction lcmAll() {\n    let result = 1;\n    for (let i = 0; i < process; i++) {\n        result = lcm(result, document.querySelector(\".main-table\").rows[2 * i + 2].cells.length);\n    }\n    return result;\n}\n\nfunction updateColspan() { //update burst time cell colspan\n    let totalColumns = lcmAll();\n    let processHeading = document.querySelector(\"thead .process-time\");\n    processHeading.setAttribute(\"colspan\", totalColumns);\n    let processTimes = [];\n    let table = document.querySelector(\".main-table\");\n    for (let i = 0; i < process; i++) {\n        let row = table.rows[2 * i + 2].cells;\n        processTimes.push(row.length);\n    }\n    for (let i = 0; i < process; i++) {\n        let row1 = table.rows[2 * i + 1].cells;\n        let row2 = table.rows[2 * i + 2].cells;\n        for (let j = 0; j < processTimes[i]; j++) {\n            row1[j + 3].setAttribute(\"colspan\", totalColumns / processTimes[i]);\n            row2[j].setAttribute(\"colspan\", totalColumns / processTimes[i]);\n        }\n    }\n}\n\nfunction addremove() { //add remove bt-io time pair add event listener\n    let processTimes = [];\n    let table = document.querySelector(\".main-table\");\n    for (let i = 0; i < process; i++) {\n        let row = table.rows[2 * i + 2].cells;\n        processTimes.push(row.length);\n    }\n    let addbtns = document.querySelectorAll(\".add-process-btn\");\n    for (let i = 0; i < process; i++) {\n        addbtns[i].onclick = () => {\n            let table = document.querySelector(\".main-table\");\n            let row1 = table.rows[2 * i + 1];\n            let row2 = table.rows[2 * i + 2];\n            let newcell1 = row1.insertCell(processTimes[i] + 3);\n            newcell1.innerHTML = \"IO\";\n            newcell1.classList.add(\"process-time\");\n            newcell1.classList.add(\"io\");\n            newcell1.classList.add(\"process-heading\");\n            let newcell2 = row2.insertCell(processTimes[i]);\n            newcell2.innerHTML = '<input type=\"number\" min=\"1\" step=\"1\" value=\"1\">';\n            newcell2.classList.add(\"process-time\");\n            newcell2.classList.add(\"io\");\n            newcell2.classList.add(\"process-input\");\n            let newcell3 = row1.insertCell(processTimes[i] + 4);\n            newcell3.innerHTML = \"CPU\";\n            newcell3.classList.add(\"process-time\");\n            newcell3.classList.add(\"cpu\");\n            newcell3.classList.add(\"process-heading\");\n            let newcell4 = row2.insertCell(processTimes[i] + 1);\n            newcell4.innerHTML = '<input type=\"number\" min=\"1\" step=\"1\" value=\"1\">';\n            newcell4.classList.add(\"process-time\");\n            newcell4.classList.add(\"cpu\");\n            newcell4.classList.add(\"process-input\");\n            processTimes[i] += 2;\n            updateColspan();\n            inputOnChange();\n        };\n    }\n    let removebtns = document.querySelectorAll(\".remove-process-btn\");\n    for (let i = 0; i < process; i++) {\n        removebtns[i].onclick = () => {\n            if (processTimes[i] > 1) {\n                let table = document.querySelector(\".main-table\");\n                processTimes[i]--;\n                let row1 = table.rows[2 * i + 1];\n                row1.deleteCell(processTimes[i] + 3);\n                let row2 = table.rows[2 * i + 2];\n                row2.deleteCell(processTimes[i]);\n                processTimes[i]--;\n                table = document.querySelector(\".main-table\");\n                row1 = table.rows[2 * i + 1];\n                row1.deleteCell(processTimes[i] + 3);\n                row2 = table.rows[2 * i + 2];\n                row2.deleteCell(processTimes[i]);\n                updateColspan();\n            }\n        };\n    }\n}\naddremove();\n\nfunction addProcess() {\n    process++;\n    let rowHTML1 = `\n                          <td class=\"process-id\" rowspan=\"2\">P${process}</td>\n                          <td class=\"priority hide\" rowspan=\"2\"><input type=\"number\" min=\"1\" step=\"1\" value=\"1\"></td>\n                          <td class=\"arrival-time\" rowspan=\"2\"><input type=\"number\" min=\"0\" step=\"1\" value=\"0\"> </td>\n                          <td class=\"process-time cpu process-heading\" colspan=\"\">CPU</td>\n                          <td class=\"process-btn\"><button type=\"button\" class=\"add-process-btn\">+</button></td>\n                          <td class=\"process-btn\"><button type=\"button\" class=\"remove-process-btn\">-</button></td>\n                      `;\n    let rowHTML2 = `\n                           <td class=\"process-time cpu process-input\"><input type=\"number\" min=\"1\" step=\"1\" value=\"1\"> </td>\n                      `;\n    let table = document.querySelector(\".main-table tbody\");\n    table.insertRow(table.rows.length).innerHTML = rowHTML1;\n    table.insertRow(table.rows.length).innerHTML = rowHTML2;\n    checkPriorityCell();\n    addremove();\n    updateColspan();\n    inputOnChange();\n}\n\nfunction deleteProcess() {\n    let table = document.querySelector(\".main-table\");\n    if (process > 1) {\n        table.deleteRow(table.rows.length - 1);\n        table.deleteRow(table.rows.length - 1);\n        process--;\n    }\n    updateColspan();\n    inputOnChange();\n}\n\ndocument.querySelector(\".add-btn\").onclick = () => { //add row event listener\n    addProcess();\n};\ndocument.querySelector(\".remove-btn\").onclick = () => { //remove row event listener\n    deleteProcess();\n};\n//------------------------\nclass Input {\n    constructor() {\n        this.processId = [];\n        this.priority = [];\n        this.arrivalTime = [];\n        this.processTime = [];\n        this.processTimeLength = [];\n        this.totalBurstTime = [];\n        this.algorithm = \"\";\n        this.algorithmType = \"\";\n        this.timeQuantum = 0;\n        this.contextSwitch = 0;\n    }\n}\nclass Utility {\n    constructor() {\n        this.remainingProcessTime = [];\n        this.remainingBurstTime = [];\n        this.remainingTimeRunning = [];\n        this.currentProcessIndex = [];\n        this.start = [];\n        this.done = [];\n        this.returnTime = [];\n        this.currentTime = 0;\n    }\n}\nclass Output {\n    constructor() {\n        this.completionTime = [];\n        this.turnAroundTime = [];\n        this.waitingTime = [];\n        this.responseTime = [];\n        this.schedule = [];\n        this.timeLog = [];\n        this.contextSwitches = 0;\n        this.averageTimes = []; //ct,tat,wt,rt\n    }\n}\nclass TimeLog {\n    constructor() {\n        this.time = -1;\n        this.remain = [];\n        this.ready = [];\n        this.running = [];\n        this.block = [];\n        this.terminate = [];\n        this.move = []; //0-remain->ready 1-ready->running 2-running->terminate 3-running->ready 4-running->block 5-block->ready\n    }\n}\n\nfunction setAlgorithmNameType(input, algorithm) {\n    input.algorithm = algorithm;\n    switch (algorithm) {\n        case 'fcfs':\n        case 'sjf':\n        case 'ljf':\n        case 'pnp':\n        case 'hrrn':\n            input.algorithmType = \"nonpreemptive\";\n            break;\n        case 'srtf':\n        case 'lrtf':\n        case 'pp':\n            input.algorithmType = \"preemptive\";\n            break;\n        case 'rr':\n            input.algorithmType = \"roundrobin\";\n            break;\n    }\n}\n\nfunction setInput(input) {\n    for (let i = 1; i <= process; i++) {\n        input.processId.push(i - 1);\n        let rowCells1 = document.querySelector(\".main-table\").rows[2 * i - 1].cells;\n        let rowCells2 = document.querySelector(\".main-table\").rows[2 * i].cells;\n        input.priority.push(Number(rowCells1[1].firstElementChild.value));\n        input.arrivalTime.push(Number(rowCells1[2].firstElementChild.value));\n        let ptn = Number(rowCells2.length);\n        let pta = [];\n        for (let j = 0; j < ptn; j++) {\n            pta.push(Number(rowCells2[j].firstElementChild.value));\n        }\n        input.processTime.push(pta);\n        input.processTimeLength.push(ptn);\n    }\n    //total burst time for each process\n    input.totalBurstTime = new Array(process).fill(0);\n    input.processTime.forEach((e1, i) => {\n        e1.forEach((e2, j) => {\n            if (j % 2 == 0) {\n                input.totalBurstTime[i] += e2;\n            }\n        });\n    });\n    setAlgorithmNameType(input, selectedAlgorithm.value);\n    input.contextSwitch = Number(document.querySelector(\"#context-switch\").value);\n    input.timeQuantum = Number(document.querySelector(\"#tq\").value);\n}\n\nfunction setUtility(input, utility) {\n    utility.remainingProcessTime = input.processTime.slice();\n    utility.remainingBurstTime = input.totalBurstTime.slice();\n    utility.remainingTimeRunning = new Array(process).fill(0);\n    utility.currentProcessIndex = new Array(process).fill(0);\n    utility.start = new Array(process).fill(false);\n    utility.done = new Array(process).fill(false);\n    utility.returnTime = input.arrivalTime.slice();\n}\n\nfunction reduceSchedule(schedule) {\n    let newSchedule = [];\n    let currentScheduleElement = schedule[0][0];\n    let currentScheduleLength = schedule[0][1];\n    for (let i = 1; i < schedule.length; i++) {\n        if (schedule[i][0] == currentScheduleElement) {\n            currentScheduleLength += schedule[i][1];\n        } else {\n            newSchedule.push([currentScheduleElement, currentScheduleLength]);\n            currentScheduleElement = schedule[i][0];\n            currentScheduleLength = schedule[i][1];\n        }\n    }\n    newSchedule.push([currentScheduleElement, currentScheduleLength]);\n    return newSchedule;\n}\n\nfunction reduceTimeLog(timeLog) {\n    let timeLogLength = timeLog.length;\n    let newTimeLog = [],\n        j = 0;\n    for (let i = 0; i < timeLogLength - 1; i++) {\n        if (timeLog[i] != timeLog[i + 1]) {\n            newTimeLog.push(timeLog[j]);\n        }\n        j = i + 1;\n    }\n    if (j == timeLogLength - 1) {\n        newTimeLog.push(timeLog[j]);\n    }\n    return newTimeLog;\n}\n\nfunction outputAverageTimes(output) {\n    let avgct = 0;\n    output.completionTime.forEach((element) => {\n        avgct += element;\n    });\n    avgct /= process;\n    let avgtat = 0;\n    output.turnAroundTime.forEach((element) => {\n        avgtat += element;\n    });\n    avgtat /= process;\n    let avgwt = 0;\n    output.waitingTime.forEach((element) => {\n        avgwt += element;\n    });\n    avgwt /= process;\n    let avgrt = 0;\n    output.responseTime.forEach((element) => {\n        avgrt += element;\n    });\n    avgrt /= process;\n    return [avgct, avgtat, avgwt, avgrt];\n}\n\nfunction setOutput(input, output) {\n    //set turn around time and waiting time\n    for (let i = 0; i < process; i++) {\n        output.turnAroundTime[i] = output.completionTime[i] - input.arrivalTime[i];\n        output.waitingTime[i] = output.turnAroundTime[i] - input.totalBurstTime[i];\n    }\n    output.schedule = reduceSchedule(output.schedule);\n    output.timeLog = reduceTimeLog(output.timeLog);\n    output.averageTimes = outputAverageTimes(output);\n}\n\nfunction getDate(sec) {\n    return (new Date(0, 0, 0, 0, sec / 60, sec % 60));\n}\n\nfunction showGanttChart(output, outputDiv) {\n    let ganttChartHeading = document.createElement(\"h3\");\n    ganttChartHeading.innerHTML = \"Gantt Chart\";\n    outputDiv.appendChild(ganttChartHeading);\n    let ganttChartData = [];\n    let startGantt = 0;\n    output.schedule.forEach((element) => {\n        if (element[0] == -2) { //context switch\n            ganttChartData.push([\n                \"Time\",\n                \"CS\",\n                \"grey\",\n                getDate(startGantt),\n                getDate(startGantt + element[1])\n            ]);\n\n        } else if (element[0] == -1) { //nothing\n            ganttChartData.push([\n                \"Time\",\n                \"Empty\",\n                \"black\",\n                getDate(startGantt),\n                getDate(startGantt + element[1])\n            ]);\n\n        } else { //process \n            ganttChartData.push([\n                \"Time\",\n                \"P\" + element[0],\n                \"\",\n                getDate(startGantt),\n                getDate(startGantt + element[1])\n            ]);\n        }\n        startGantt += element[1];\n    });\n    let ganttChart = document.createElement(\"div\");\n    ganttChart.id = \"gantt-chart\";\n\n    google.charts.load(\"current\", { packages: [\"timeline\"] });\n    google.charts.setOnLoadCallback(drawGanttChart);\n\n    function drawGanttChart() {\n        var container = document.getElementById(\"gantt-chart\");\n        var chart = new google.visualization.Timeline(container);\n        var dataTable = new google.visualization.DataTable();\n\n        dataTable.addColumn({ type: \"string\", id: \"Gantt Chart\" });\n        dataTable.addColumn({ type: \"string\", id: \"Process\" });\n        dataTable.addColumn({ type: 'string', id: 'style', role: 'style' });\n        dataTable.addColumn({ type: \"date\", id: \"Start\" });\n        dataTable.addColumn({ type: \"date\", id: \"End\" });\n        dataTable.addRows(ganttChartData);\n        let ganttWidth = '100%';\n        if (startGantt >= 20) {\n            ganttWidth = 0.05 * startGantt * screen.availWidth;\n        }\n        var options = {\n            width: ganttWidth,\n            timeline: {\n                showRowLabels: false,\n                avoidOverlappingGridLines: false\n            }\n        };\n        chart.draw(dataTable, options);\n    }\n    outputDiv.appendChild(ganttChart);\n}\n\nfunction showTimelineChart(output, outputDiv) {\n    let timelineChartHeading = document.createElement(\"h3\");\n    timelineChartHeading.innerHTML = \"Timeline Chart\";\n    outputDiv.appendChild(timelineChartHeading);\n    let timelineChartData = [];\n    let startTimeline = 0;\n    output.schedule.forEach((element) => {\n        if (element[0] >= 0) { //process \n            timelineChartData.push([\n                \"P\" + element[0],\n                getDate(startTimeline),\n                getDate(startTimeline + element[1])\n            ]);\n        }\n        startTimeline += element[1];\n    });\n    timelineChartData.sort((a, b) => parseInt(a[0].substring(1, a[0].length)) - parseInt(b[0].substring(1, b[0].length)));\n    let timelineChart = document.createElement(\"div\");\n    timelineChart.id = \"timeline-chart\";\n\n    google.charts.load(\"current\", { packages: [\"timeline\"] });\n    google.charts.setOnLoadCallback(drawTimelineChart);\n\n    function drawTimelineChart() {\n        var container = document.getElementById(\"timeline-chart\");\n        var chart = new google.visualization.Timeline(container);\n        var dataTable = new google.visualization.DataTable();\n\n        dataTable.addColumn({ type: \"string\", id: \"Process\" });\n        dataTable.addColumn({ type: \"date\", id: \"Start\" });\n        dataTable.addColumn({ type: \"date\", id: \"End\" });\n        dataTable.addRows(timelineChartData);\n\n        let timelineWidth = '100%';\n        if (startTimeline >= 20) {\n            timelineWidth = 0.05 * startTimeline * screen.availWidth;\n        }\n        var options = {\n            width: timelineWidth,\n        };\n        chart.draw(dataTable, options);\n    }\n    outputDiv.appendChild(timelineChart);\n}\n\nfunction showFinalTable(input, output, outputDiv) {\n    let finalTableHeading = document.createElement(\"h3\");\n    finalTableHeading.innerHTML = \"Final Table\";\n    outputDiv.appendChild(finalTableHeading);\n    let table = document.createElement(\"table\");\n    table.classList.add(\"final-table\");\n    let thead = table.createTHead();\n    let row = thead.insertRow(0);\n    let headings = [\n        \"Process\",\n        \"Arrival Time\",\n        \"Total Burst Time\",\n        \"Completion Time\",\n        \"Turn Around Time\",\n        \"Waiting Time\",\n        \"Response Time\",\n    ];\n    headings.forEach((element, index) => {\n        let cell = row.insertCell(index);\n        cell.innerHTML = element;\n    });\n    let tbody = table.createTBody();\n    for (let i = 0; i < process; i++) {\n        let row = tbody.insertRow(i);\n        let cell = row.insertCell(0);\n        cell.innerHTML = \"P\" + (i + 1);\n        cell = row.insertCell(1);\n        cell.innerHTML = input.arrivalTime[i];\n        cell = row.insertCell(2);\n        cell.innerHTML = input.totalBurstTime[i];\n        cell = row.insertCell(3);\n        cell.innerHTML = output.completionTime[i];\n        cell = row.insertCell(4);\n        cell.innerHTML = output.turnAroundTime[i];\n        cell = row.insertCell(5);\n        cell.innerHTML = output.waitingTime[i];\n        cell = row.insertCell(6);\n        cell.innerHTML = output.responseTime[i];\n    }\n    outputDiv.appendChild(table);\n\n    let tbt = 0;\n    input.totalBurstTime.forEach((element) => (tbt += element));\n    let lastct = 0;\n    output.completionTime.forEach((element) => (lastct = Math.max(lastct, element)));\n\n    let cpu = document.createElement(\"p\");\n    cpu.innerHTML = \"CPU Utilization : \" + (tbt / lastct) * 100 + \"%\";\n    outputDiv.appendChild(cpu);\n\n    let tp = document.createElement(\"p\");\n    tp.innerHTML = \"Throughput : \" + process / lastct;\n    outputDiv.appendChild(tp);\n    if (input.contextSwitch > 0) {\n\n        let cs = document.createElement(\"p\");\n        cs.innerHTML = \"Number of Context Switches : \" + (output.contextSwitches - 1);\n        outputDiv.appendChild(cs);\n    }\n}\n\nfunction toggleTimeLogArrowColor(timeLog, color) {\n    let timeLogMove = ['remain-ready', 'ready-running', 'running-terminate', 'running-ready', 'running-block', 'block-ready'];\n    timeLog.move.forEach(element => {\n        document.getElementById(timeLogMove[element]).style.color = color;\n    });\n}\n\nfunction nextTimeLog(timeLog) {\n    let timeLogTableDiv = document.getElementById(\"time-log-table-div\");\n\n    let arrowHTML = `\n    <p id = \"remain-ready\" class = \"arrow\">&rarr;</p>\n    <p id = \"ready-running\" class = \"arrow\">&#10554;</p>\n    <p id = \"running-ready\" class = \"arrow\">&#10554;</p>\n    <p id = \"running-terminate\" class = \"arrow\">&rarr;</p>\n    <p id = \"running-block\" class = \"arrow\">&rarr;</p>\n    <p id = \"block-ready\" class = \"arrow\">&rarr;</p>\n    `;\n    timeLogTableDiv.innerHTML = arrowHTML;\n\n    let remainTable = document.createElement(\"table\");\n    remainTable.id = \"remain-table\";\n    remainTable.className = 'time-log-table';\n    let remainTableHead = remainTable.createTHead();\n    let remainTableHeadRow = remainTableHead.insertRow(0);\n    let remainTableHeading = remainTableHeadRow.insertCell(0);\n    remainTableHeading.innerHTML = \"Remain\";\n    let remainTableBody = remainTable.createTBody();\n    for (let i = 0; i < timeLog.remain.length; i++) {\n        let remainTableBodyRow = remainTableBody.insertRow(i);\n        let remainTableValue = remainTableBodyRow.insertCell(0);\n        remainTableValue.innerHTML = 'P' + (timeLog.remain[i] + 1);\n    }\n    timeLogTableDiv.appendChild(remainTable);\n\n    let readyTable = document.createElement(\"table\");\n    readyTable.id = \"ready-table\";\n    readyTable.className = 'time-log-table';\n    let readyTableHead = readyTable.createTHead();\n    let readyTableHeadRow = readyTableHead.insertRow(0);\n    let readyTableHeading = readyTableHeadRow.insertCell(0);\n    readyTableHeading.innerHTML = \"Ready\";\n    let readyTableBody = readyTable.createTBody();\n    for (let i = 0; i < timeLog.ready.length; i++) {\n        let readyTableBodyRow = readyTableBody.insertRow(i);\n        let readyTableValue = readyTableBodyRow.insertCell(0);\n        readyTableValue.innerHTML = 'P' + (timeLog.ready[i] + 1);\n    }\n    timeLogTableDiv.appendChild(readyTable);\n\n    let runningTable = document.createElement(\"table\");\n    runningTable.id = \"running-table\";\n    runningTable.className = 'time-log-table';\n    let runningTableHead = runningTable.createTHead();\n    let runningTableHeadRow = runningTableHead.insertRow(0);\n    let runningTableHeading = runningTableHeadRow.insertCell(0);\n    runningTableHeading.innerHTML = \"Running\";\n    let runningTableBody = runningTable.createTBody();\n    for (let i = 0; i < timeLog.running.length; i++) {\n        let runningTableBodyRow = runningTableBody.insertRow(i);\n        let runningTableValue = runningTableBodyRow.insertCell(0);\n        runningTableValue.innerHTML = 'P' + (timeLog.running[i] + 1);\n    }\n    timeLogTableDiv.appendChild(runningTable);\n\n    let blockTable = document.createElement(\"table\");\n    blockTable.id = \"block-table\";\n    blockTable.className = 'time-log-table';\n    let blockTableHead = blockTable.createTHead();\n    let blockTableHeadRow = blockTableHead.insertRow(0);\n    let blockTableHeading = blockTableHeadRow.insertCell(0);\n    blockTableHeading.innerHTML = \"Block\";\n    let blockTableBody = blockTable.createTBody();\n    for (let i = 0; i < timeLog.block.length; i++) {\n        let blockTableBodyRow = blockTableBody.insertRow(i);\n        let blockTableValue = blockTableBodyRow.insertCell(0);\n        blockTableValue.innerHTML = 'P' + (timeLog.block[i] + 1);\n    }\n    timeLogTableDiv.appendChild(blockTable);\n\n    let terminateTable = document.createElement(\"table\");\n    terminateTable.id = \"terminate-table\";\n    terminateTable.className = 'time-log-table';\n    let terminateTableHead = terminateTable.createTHead();\n    let terminateTableHeadRow = terminateTableHead.insertRow(0);\n    let terminateTableHeading = terminateTableHeadRow.insertCell(0);\n    terminateTableHeading.innerHTML = \"Terminate\";\n    let terminateTableBody = terminateTable.createTBody();\n    for (let i = 0; i < timeLog.terminate.length; i++) {\n        let terminateTableBodyRow = terminateTableBody.insertRow(i);\n        let terminateTableValue = terminateTableBodyRow.insertCell(0);\n        terminateTableValue.innerHTML = 'P' + (timeLog.terminate[i] + 1);\n    }\n    timeLogTableDiv.appendChild(terminateTable);\n    document.getElementById(\"time-log-time\").innerHTML = \"Time : \" + timeLog.time;\n}\n\nfunction showTimeLog(output, outputDiv) {\n    reduceTimeLog(output.timeLog);\n    let timeLogDiv = document.createElement(\"div\");\n    timeLogDiv.id = \"time-log-div\";\n    timeLogDiv.style.height = (15 * process) + 300 + \"px\";\n    let startTimeLogButton = document.createElement(\"button\");\n    startTimeLogButton.id = \"start-time-log\";\n    startTimeLogButton.innerHTML = \"Start Time Log\";\n    timeLogDiv.appendChild(startTimeLogButton);\n    outputDiv.appendChild(timeLogDiv);\n\n    document.querySelector(\"#start-time-log\").onclick = () => {\n        timeLogStart = 1;\n        let timeLogDiv = document.getElementById(\"time-log-div\");\n        let timeLogOutputDiv = document.createElement(\"div\");\n        timeLogOutputDiv.id = \"time-log-output-div\";\n\n        let timeLogTableDiv = document.createElement(\"div\");\n        timeLogTableDiv.id = \"time-log-table-div\";\n\n        let timeLogTime = document.createElement(\"p\");\n        timeLogTime.id = \"time-log-time\";\n\n        timeLogOutputDiv.appendChild(timeLogTableDiv);\n        timeLogOutputDiv.appendChild(timeLogTime);\n        timeLogDiv.appendChild(timeLogOutputDiv);\n        let index = 0;\n        let timeLogInterval = setInterval(() => {\n            nextTimeLog(output.timeLog[index]);\n            if (index != output.timeLog.length - 1) {\n                setTimeout(() => {\n                    toggleTimeLogArrowColor(output.timeLog[index], 'red');\n                    setTimeout(() => {\n                        toggleTimeLogArrowColor(output.timeLog[index], 'black');\n                    }, 600);\n                }, 200);\n            }\n            index++;\n            if (index == output.timeLog.length) {\n                clearInterval(timeLogInterval);\n            }\n            document.getElementById(\"calculate\").onclick = () => {\n                clearInterval(timeLogInterval);\n                document.getElementById(\"time-log-output-div\").innerHTML = \"\";\n                calculateOutput();\n            }\n        }, 1000);\n    };\n}\n\nfunction showRoundRobinChart(outputDiv) {\n    let roundRobinInput = new Input();\n    setInput(roundRobinInput);\n    let maxTimeQuantum = 0;\n    roundRobinInput.processTime.forEach(processTimeArray => {\n        processTimeArray.forEach((time, index) => {\n            if (index % 2 == 0) {\n                maxTimeQuantum = Math.max(maxTimeQuantum, time);\n            }\n        });\n    });\n    let roundRobinChartData = [\n        [],\n        [],\n        [],\n        [],\n        []\n    ];\n    let timeQuantumArray = [];\n    for (let timeQuantum = 1; timeQuantum <= maxTimeQuantum; timeQuantum++) {\n        timeQuantumArray.push(timeQuantum);\n        let roundRobinInput = new Input();\n        setInput(roundRobinInput);\n        setAlgorithmNameType(roundRobinInput, 'rr');\n        roundRobinInput.timeQuantum = timeQuantum;\n        let roundRobinUtility = new Utility();\n        setUtility(roundRobinInput, roundRobinUtility);\n        let roundRobinOutput = new Output();\n        CPUScheduler(roundRobinInput, roundRobinUtility, roundRobinOutput);\n        setOutput(roundRobinInput, roundRobinOutput);\n        for (let i = 0; i < 4; i++) {\n            roundRobinChartData[i].push(roundRobinOutput.averageTimes[i]);\n        }\n        roundRobinChartData[4].push(roundRobinOutput.contextSwitches);\n    }\n    let roundRobinChartCanvas = document.createElement('canvas');\n    roundRobinChartCanvas.id = \"round-robin-chart\";\n    let roundRobinChartDiv = document.createElement('div');\n    roundRobinChartDiv.id = \"round-robin-chart-div\";\n    roundRobinChartDiv.appendChild(roundRobinChartCanvas);\n    outputDiv.appendChild(roundRobinChartDiv);\n\n    new Chart(document.getElementById('round-robin-chart'), {\n        type: 'line',\n        data: {\n            labels: timeQuantumArray,\n            datasets: [{\n                    label: \"Completion Time\",\n                    borderColor: '#3366CC',\n                    data: roundRobinChartData[0]\n                },\n                {\n                    label: \"Turn Around Time\",\n                    borderColor: '#DC3912',\n                    data: roundRobinChartData[1]\n                },\n                {\n                    label: \"Waiting Time\",\n                    borderColor: '#FF9900',\n                    data: roundRobinChartData[2]\n                },\n                {\n                    label: \"Response Time\",\n                    borderColor: '#109618',\n                    data: roundRobinChartData[3]\n                },\n                {\n                    label: \"Context Switches\",\n                    borderColor: '#990099',\n                    data: roundRobinChartData[4]\n                },\n            ]\n        },\n        options: {\n            title: {\n                display: true,\n                text: ['Round Robin', 'Comparison of Completion, Turn Around, Waiting, Response Time and Context Switches', 'The Lower The Better']\n            },\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }],\n                xAxes: [{\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Time Quantum'\n                    }\n                }]\n            },\n            legend: {\n                display: true,\n                labels: {\n                    fontColor: 'black'\n                }\n            }\n        }\n    });\n}\n\n\nfunction showAlgorithmChart(outputDiv) {\n    let algorithmArray = [\"fcfs\", \"sjf\", \"srtf\", \"ljf\", \"lrtf\", \"rr\", \"hrrn\", \"pnp\", \"pp\"];\n    let algorithmNameArray = [\"FCFS\", \"SJF\", \"SRTF\", \"LJF\", \"LRTF\", \"RR\", \"HRRN\", \"PNP\", \"PP\"];\n    let algorithmChartData = [\n        [],\n        [],\n        [],\n        []\n    ];\n    algorithmArray.forEach(currentAlgorithm => {\n        let chartInput = new Input();\n        let chartUtility = new Utility();\n        let chartOutput = new Output();\n        setInput(chartInput);\n        setAlgorithmNameType(chartInput, currentAlgorithm);\n        setUtility(chartInput, chartUtility);\n        CPUScheduler(chartInput, chartUtility, chartOutput);\n        setOutput(chartInput, chartOutput);\n        for (let i = 0; i < 4; i++) {\n            algorithmChartData[i].push(chartOutput.averageTimes[i]);\n        }\n    });\n    let algorithmChartCanvas = document.createElement('canvas');\n    algorithmChartCanvas.id = \"algorithm-chart\";\n    let algorithmChartDiv = document.createElement('div');\n    algorithmChartDiv.id = \"algorithm-chart-div\";\n    algorithmChartDiv.style.height = \"40vh\";\n    algorithmChartDiv.style.width = \"80%\";\n    algorithmChartDiv.appendChild(algorithmChartCanvas);\n    outputDiv.appendChild(algorithmChartDiv);\n    new Chart(document.getElementById('algorithm-chart'), {\n        type: 'bar',\n        data: {\n            labels: algorithmNameArray,\n            datasets: [{\n                    label: \"Completion Time\",\n                    backgroundColor: '#3366CC',\n                    data: algorithmChartData[0]\n                },\n                {\n                    label: \"Turn Around Time\",\n                    backgroundColor: '#DC3912',\n                    data: algorithmChartData[1]\n                },\n                {\n                    label: \"Waiting Time\",\n                    backgroundColor: '#FF9900',\n                    data: algorithmChartData[2]\n                },\n                {\n                    label: \"Response Time\",\n                    backgroundColor: '#109618',\n                    data: algorithmChartData[3]\n                }\n            ]\n        },\n        options: {\n            title: {\n                display: true,\n                text: ['Algorithm', 'Comparison of Completion, Turn Around, Waiting and Response Time', 'The Lower The Better']\n            },\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }],\n                xAxes: [{\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Algorithms'\n                    }\n                }]\n            },\n            legend: {\n                display: true,\n                labels: {\n                    fontColor: 'black'\n                }\n            }\n        }\n    });\n}\n\nfunction showOutput(input, output, outputDiv) {\n    showGanttChart(output, outputDiv);\n    outputDiv.insertAdjacentHTML(\"beforeend\", \"<hr>\");\n    showTimelineChart(output, outputDiv);\n    outputDiv.insertAdjacentHTML(\"beforeend\", \"<hr>\");\n    showFinalTable(input, output, outputDiv);\n    outputDiv.insertAdjacentHTML(\"beforeend\", \"<hr>\");\n    showTimeLog(output, outputDiv);\n    outputDiv.insertAdjacentHTML(\"beforeend\", \"<hr>\");\n    if (selectedAlgorithm.value == \"rr\") {\n        showRoundRobinChart(outputDiv);\n        outputDiv.insertAdjacentHTML(\"beforeend\", \"<hr>\");\n    }\n    showAlgorithmChart(outputDiv);\n}\n\nfunction CPUScheduler(input, utility, output) {\n    function updateReadyQueue(currentTimeLog) {\n        let candidatesRemain = currentTimeLog.remain.filter((element) => input.arrivalTime[element] <= currentTimeLog.time);\n        if (candidatesRemain.length > 0) {\n            currentTimeLog.move.push(0);\n        }\n        let candidatesBlock = currentTimeLog.block.filter((element) => utility.returnTime[element] <= currentTimeLog.time);\n        if (candidatesBlock.length > 0) {\n            currentTimeLog.move.push(5);\n        }\n        let candidates = candidatesRemain.concat(candidatesBlock);\n        candidates.sort((a, b) => utility.returnTime[a] - utility.returnTime[b]);\n        candidates.forEach(element => {\n            moveElement(element, currentTimeLog.remain, currentTimeLog.ready);\n            moveElement(element, currentTimeLog.block, currentTimeLog.ready);\n        });\n        output.timeLog.push(JSON.parse(JSON.stringify(currentTimeLog)));\n        currentTimeLog.move = [];\n    }\n\n    function moveElement(value, from, to) { //if present in from and not in to\n        let index = from.indexOf(value);\n        if (index != -1) {\n            from.splice(index, 1);\n        }\n        if (to.indexOf(value) == -1) {\n            to.push(value);\n        }\n    }\n    let currentTimeLog = new TimeLog();\n    currentTimeLog.remain = input.processId;\n    output.timeLog.push(JSON.parse(JSON.stringify(currentTimeLog)));\n    currentTimeLog.move = [];\n    currentTimeLog.time++;\n    let lastFound = -1;\n    while (utility.done.some((element) => element == false)) {\n        updateReadyQueue(currentTimeLog);\n        let found = -1;\n        if (currentTimeLog.running.length == 1) {\n            found = currentTimeLog.running[0];\n        } else if (currentTimeLog.ready.length > 0) {\n            if (input.algorithm == 'rr') {\n                found = currentTimeLog.ready[0];\n                utility.remainingTimeRunning[found] = Math.min(utility.remainingProcessTime[found][utility.currentProcessIndex[found]], input.timeQuantum);\n            } else {\n                let candidates = currentTimeLog.ready;\n                candidates.sort((a, b) => a - b);\n                candidates.sort((a, b) => {\n                    switch (input.algorithm) {\n                        case 'fcfs':\n                            return utility.returnTime[a] - utility.returnTime[b];\n                        case 'sjf':\n                        case 'srtf':\n                            return utility.remainingBurstTime[a] - utility.remainingBurstTime[b];\n                        case 'ljf':\n                        case 'lrtf':\n                            return utility.remainingBurstTime[b] - utility.remainingBurstTime[a];\n                        case 'pnp':\n                        case 'pp':\n                            return priorityPreference * (input.priority[a] - input.priority[b]);\n                        case 'hrrn':\n                            function responseRatio(id) {\n                                let s = utility.remainingBurstTime[id];\n                                let w = currentTimeLog.time - input.arrivalTime[id] - s;\n                                return 1 + w / s;\n                            }\n                            return responseRatio(b) - responseRatio(a);\n                    }\n                });\n                found = candidates[0];\n                if (input.algorithmType == \"preemptive\" && found >= 0 && lastFound >= 0 && found != lastFound) { //context switch\n                    output.schedule.push([-2, input.contextSwitch]);\n                    for (let i = 0; i < input.contextSwitch; i++, currentTimeLog.time++) {\n                        updateReadyQueue(currentTimeLog);\n                    }\n                    if (input.contextSwitch > 0) {\n                        output.contextSwitches++;\n                    }\n                }\n            }\n            moveElement(found, currentTimeLog.ready, currentTimeLog.running);\n            currentTimeLog.move.push(1);\n            output.timeLog.push(JSON.parse(JSON.stringify(currentTimeLog)));\n            currentTimeLog.move = [];\n            if (utility.start[found] == false) {\n                utility.start[found] = true;\n                output.responseTime[found] = currentTimeLog.time - input.arrivalTime[found];\n            }\n        }\n        currentTimeLog.time++;\n        if (found != -1) {\n            output.schedule.push([found + 1, 1]);\n            utility.remainingProcessTime[found][utility.currentProcessIndex[found]]--;\n            utility.remainingBurstTime[found]--;\n\n            if (input.algorithm == 'rr') {\n                utility.remainingTimeRunning[found]--;\n                if (utility.remainingTimeRunning[found] == 0) {\n                    if (utility.remainingProcessTime[found][utility.currentProcessIndex[found]] == 0) {\n                        utility.currentProcessIndex[found]++;\n                        if (utility.currentProcessIndex[found] == input.processTimeLength[found]) {\n                            utility.done[found] = true;\n                            output.completionTime[found] = currentTimeLog.time;\n                            moveElement(found, currentTimeLog.running, currentTimeLog.terminate);\n                            currentTimeLog.move.push(2);\n                        } else {\n                            utility.returnTime[found] = currentTimeLog.time + input.processTime[found][utility.currentProcessIndex[found]];\n                            utility.currentProcessIndex[found]++;\n                            moveElement(found, currentTimeLog.running, currentTimeLog.block);\n                            currentTimeLog.move.push(4);\n                        }\n                        output.timeLog.push(JSON.parse(JSON.stringify(currentTimeLog)));\n                        currentTimeLog.move = [];\n                        updateReadyQueue(currentTimeLog);\n                    } else {\n                        updateReadyQueue(currentTimeLog);\n                        moveElement(found, currentTimeLog.running, currentTimeLog.ready);\n                        currentTimeLog.move.push(3);\n                        output.timeLog.push(JSON.parse(JSON.stringify(currentTimeLog)));\n                        currentTimeLog.move = [];\n                    }\n                    output.schedule.push([-2, input.contextSwitch]);\n                    for (let i = 0; i < input.contextSwitch; i++, currentTimeLog.time++) {\n                        updateReadyQueue(currentTimeLog);\n                    }\n                    if (input.contextSwitch > 0) {\n                        output.contextSwitches++;\n                    }\n                }\n            } else { //preemptive and non-preemptive\n                if (utility.remainingProcessTime[found][utility.currentProcessIndex[found]] == 0) {\n                    utility.currentProcessIndex[found]++;\n                    if (utility.currentProcessIndex[found] == input.processTimeLength[found]) {\n                        utility.done[found] = true;\n                        output.completionTime[found] = currentTimeLog.time;\n                        moveElement(found, currentTimeLog.running, currentTimeLog.terminate);\n                        currentTimeLog.move.push(2);\n                    } else {\n                        utility.returnTime[found] = currentTimeLog.time + input.processTime[found][utility.currentProcessIndex[found]];\n                        utility.currentProcessIndex[found]++;\n                        moveElement(found, currentTimeLog.running, currentTimeLog.block);\n                        currentTimeLog.move.push(4);\n                    }\n                    output.timeLog.push(JSON.parse(JSON.stringify(currentTimeLog)));\n                    currentTimeLog.move = [];\n                    if (currentTimeLog.running.length == 0) { //context switch\n                        output.schedule.push([-2, input.contextSwitch]);\n                        for (let i = 0; i < input.contextSwitch; i++, currentTimeLog.time++) {\n                            updateReadyQueue(currentTimeLog);\n                        }\n                        if (input.contextSwitch > 0) {\n                            output.contextSwitches++;\n                        }\n                    }\n                    lastFound = -1;\n                } else if (input.algorithmType == \"preemptive\") {\n                    moveElement(found, currentTimeLog.running, currentTimeLog.ready);\n                    currentTimeLog.move.push(3);\n                    output.timeLog.push(JSON.parse(JSON.stringify(currentTimeLog)));\n                    currentTimeLog.move = [];\n                    lastFound = found;\n                }\n            }\n        } else {\n            output.schedule.push([-1, 1]);\n            lastFound = -1;\n        }\n        output.timeLog.push(JSON.parse(JSON.stringify(currentTimeLog)));\n    }\n    output.schedule.pop();\n}\n\nfunction calculateOutput() {\n    let outputDiv = document.getElementById(\"output\");\n    outputDiv.innerHTML = \"\";\n    let mainInput = new Input();\n    let mainUtility = new Utility();\n    let mainOutput = new Output();\n    setInput(mainInput);\n    setUtility(mainInput, mainUtility);\n    CPUScheduler(mainInput, mainUtility, mainOutput);\n    setOutput(mainInput, mainOutput);\n    showOutput(mainInput, mainOutput, outputDiv);\n}\n\ndocument.getElementById(\"calculate\").onclick = () => {\n    calculateOutput();\n};"],"names":["$dad545c909cfec2d$var$priorityPreference","document","getElementById","onclick","currentPriorityPreference","innerText","$dad545c909cfec2d$var$selectedAlgorithm","$dad545c909cfec2d$var$checkPriorityCell","prioritycell","querySelectorAll","value","forEach","element","classList","remove","add","$dad545c909cfec2d$var$inputOnChange","input","type","onchange","inputVal","Number","isInt","isInteger","parentNode","contains","id","timequantum","querySelector","$dad545c909cfec2d$var$checkTimeQuantumInput","$dad545c909cfec2d$var$process","$dad545c909cfec2d$var$updateColspan","totalColumns","result","i","x","y","rows","cells","length","t","$dad545c909cfec2d$var$gcd","$dad545c909cfec2d$var$lcmAll","setAttribute","processTimes","table","row","push","i1","row1","row2","j","$dad545c909cfec2d$var$addremove","addbtns","newcell1","insertCell","innerHTML","newcell2","newcell3","newcell4","removebtns","i2","deleteCell","rowHTML1","insertRow","$dad545c909cfec2d$var$addProcess","deleteRow","$dad545c909cfec2d$var$deleteProcess","$dad545c909cfec2d$var$Input","constructor","this","processId","priority","arrivalTime","processTime","processTimeLength","totalBurstTime","algorithm","algorithmType","timeQuantum","contextSwitch","$dad545c909cfec2d$var$Utility","remainingProcessTime","remainingBurstTime","remainingTimeRunning","currentProcessIndex","start","done","returnTime","currentTime","$dad545c909cfec2d$var$Output","completionTime","turnAroundTime","waitingTime","responseTime","schedule","timeLog","contextSwitches","averageTimes","$dad545c909cfec2d$var$TimeLog","time","remain","ready","running","block","terminate","move","$dad545c909cfec2d$var$setAlgorithmNameType","$dad545c909cfec2d$var$setInput","rowCells1","rowCells2","firstElementChild","ptn","pta","Array","fill","e1","e2","$dad545c909cfec2d$var$setUtility","utility","slice","$dad545c909cfec2d$var$reduceTimeLog","timeLogLength","newTimeLog","$dad545c909cfec2d$var$setOutput","output","newSchedule","currentScheduleElement","currentScheduleLength","$dad545c909cfec2d$var$reduceSchedule","avgct","avgtat","avgwt","avgrt","$dad545c909cfec2d$var$outputAverageTimes","$dad545c909cfec2d$var$getDate","sec","Date","$dad545c909cfec2d$var$toggleTimeLogArrowColor","color","timeLogMove","style","$dad545c909cfec2d$var$showTimeLog","outputDiv","timeLogDiv","createElement","height","startTimeLogButton","appendChild","timeLogStart","timeLogOutputDiv","timeLogTableDiv","timeLogTime","index","timeLogInterval","setInterval","remainTable","className","createTHead","remainTableBody","createTBody","readyTable","readyTableBody","runningTable","runningTableBody","blockTable","blockTableBody","i3","terminateTable","terminateTableBody","i4","$dad545c909cfec2d$var$nextTimeLog","setTimeout","clearInterval","$dad545c909cfec2d$var$calculateOutput","$dad545c909cfec2d$var$showOutput","ganttChartHeading","ganttChartData","startGantt","ganttChart","google","charts","load","packages","setOnLoadCallback","container","chart","visualization","Timeline","dataTable","DataTable","addColumn","role","addRows","ganttWidth","screen","availWidth","options","width","timeline","showRowLabels","avoidOverlappingGridLines","draw","$dad545c909cfec2d$var$showGanttChart","insertAdjacentHTML","timelineChartHeading","timelineChartData","startTimeline","sort","a","b","parseInt","substring","timelineChart","timelineWidth","$dad545c909cfec2d$var$showTimelineChart","finalTableHeading","tbody","cell","tbt","lastct","Math","max","cpu","tp","cs","$dad545c909cfec2d$var$showFinalTable","roundRobinInput","maxTimeQuantum","processTimeArray","roundRobinChartData","timeQuantumArray","roundRobinInput1","roundRobinUtility","roundRobinOutput","$dad545c909cfec2d$var$CPUScheduler","roundRobinChartCanvas","roundRobinChartDiv","Chart","data","labels","datasets","label","borderColor","title","display","text","scales","yAxes","ticks","beginAtZero","xAxes","scaleLabel","labelString","legend","fontColor","$dad545c909cfec2d$var$showRoundRobinChart","algorithmChartData","currentAlgorithm","chartInput","chartUtility","chartOutput","algorithmChartCanvas","algorithmChartDiv","backgroundColor","$dad545c909cfec2d$var$showAlgorithmChart","updateReadyQueue","currentTimeLog","candidatesRemain","filter","candidatesBlock","candidates","concat","moveElement","JSON","parse","stringify","from","to","indexOf","splice","lastFound","some","found","min","responseRatio","s","pop","mainInput","mainUtility","mainOutput"],"version":3,"file":"index.d97621eb.js.map"}